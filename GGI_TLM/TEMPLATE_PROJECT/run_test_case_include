
echo "Automatic testing of GGI_TLM"
echo " "

CLEANING_LIST="\
progress \
sed_command \
GGI_TLM_memory_usage.txt \
*.dat \
*.pvsm \
*.plt \
*vtk* \
*.txt \
*.jpeg \
*.fout* \
*.tout* \
*.vmat \
*.smat \
*.cable \
*.mode \
*.fd_* \
*.jpg \
*.msh \
IELF_value.out \
fort.* \
"

 
if [ "$#" = "0" ] ; then

  echo "Run using the following form:"
  echo " "
  echo "run_automatic_test action"
  echo " "
  echo "action is the process to run:"
  echo "action=run_seq NAME       : run GGI_TLM_SEQ on the test case NAME sequentially then post process results"
  echo "action=run_mpi np NAME    : run GGI_TLM_MPI on the test case NAME using mpi on np processors then post process results"
  echo "action=post_process NAME  : post process results"
  echo "action=clean NAME         : remove all existing results"
  echo "action=plot NAME          : plot the results to screen"
  echo "action=plot_jpg NAME      : plot the results to jpeg file"
  echo "action=plot_ref NAME      : plot the results against reference results to screen"
  echo "action=plot_ref_jpg NAME  : plot the results against reference results to jpeg file"
  echo "action=reference  NAME    : update the reference results with the current set of results"
  echo " "
  echo "NAME can be one of the existing test cases or leave blank to run the whole set"
  echo " "
  echo "Existing test cases are:"
  echo "$TEST_CASE_LIST"
  
else

# set defaults...
  ACTION=$1
  NAME=$2
  NP="1"

  if [ "$ACTION" = "run_mpi" ] ; then
# slightly different order of arguments, must include the number of processors to run on
# check that we have an integer number of processors requested  
    echo $2 | grep "[^0-9]" > /dev/null 2>&1

    if [ "$?" = "0" ] ; then

      # If the grep found something other than 0-9
      # then it's not an integer.
      echo "Sorry, wanted a number of processors to run on..."
      echo " "
      echo "For example to run the test on 4 processors use:"
      echo "run_automatic_test run_mpi  4 NAME"
      echo " "

      exit
  
    else
    # The grep found only 0-9, so it's an integer. 
    
      ACTION="run"
      NP=$2
      NAME=$3

      RUN_COMMAND="$MPI_RUN_COMMAND $NP $EXECUTABLE_DIR/$MPI_SOLVER_NAME"
      SOLVER_NAME=$MPI_SOLVER_NAME
      
    fi
        
    if [ "$NP" = "1" ] ; then
      echo "Running using ${NP} processor"
    else
      echo "Running using ${NP} processors"    
    fi
    
    echo " "
    
  elif [ "$ACTION" = "run_seq" ] ; then
    
    ACTION="run"
    RUN_COMMAND="$SEQ_RUN_COMMAND $EXECUTABLE_DIR/$SEQ_SOLVER_NAME"
    SOLVER_NAME=$SEQ_SOLVER_NAME

  fi
    
  if [ "$NAME" ] ; then
    TEST_CASE_LIST=$NAME
  fi
  
  for TEST_CASE in $TEST_CASE_LIST
  do

# get the run_name 
     cd PROBLEM_SPECIFICATION_FILES
     RUN_FILE_NAME=$(ls *.inp)
     cd ..
     RUN_NAME=${RUN_FILE_NAME%\.*}
     echo "TEST_CASE:${TEST_CASE}  RUN_NAME:${RUN_NAME}"
     
     PROGRESS_FILENAME='progress'
     
     if [ "$ACTION" = "run" ] ; then

# clean any existing problem specification files   
       rm -f $CLEANING_LIST
# clean any existing output files     
       rm -f $RUN_NAME.*
       
       echo "$RUN_NAME" > run_name.txt

# copy input file and all material, cable and mode files to the run directory
       
       cp PROBLEM_SPECIFICATION_FILES/$RUN_NAME.inp ./$RUN_NAME.inp
       cp PROBLEM_SPECIFICATION_FILES/*.vmat .
       cp PROBLEM_SPECIFICATION_FILES/*.smat . 
       cp PROBLEM_SPECIFICATION_FILES/*.cable .
       cp PROBLEM_SPECIFICATION_FILES/*.mode .
   
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_model_builder < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_model_builder" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_model_builder"
         exit 1
       fi
#       
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_cable_model_builder < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_cable_model_builder" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_cable_model_builder"
         exit 1
       fi
#       
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_model_checks < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_model_checks" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_model_checks"
         exit 1
       fi
#       
       echo "RUNNING: $RUN_COMMAND"
       $RUN_COMMAND < run_name.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: $SOLVER_NAME"
         exit 1
       fi
#       
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_post_process < PROBLEM_SPECIFICATION_FILES/GGI_TLM_post_process_in.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_post_process" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_post_process"
         exit 1
       fi
#              
     elif [ "$ACTION" = "post_process" ] ; then
       
       $SEQ_RUN_COMMAND $EXECUTABLE_DIR/GGI_TLM_post_process < PROBLEM_SPECIFICATION_FILES/GGI_TLM_post_process_in.txt
       read LINE < $PROGRESS_FILENAME
       if [ "$LINE" = "FINISHED: GGI_TLM_post_process" ] ; then
         echo "STATUS: $LINE"
       else
         echo "Failed: $TEST_CASE: GGI_TLM_post_process"
         exit 1
       fi
             
     elif [ "$ACTION" = "clean" ] ; then

# clean any existing problem specification files   
       rm -f $CLEANING_LIST
# clean any existing output files     
       rm -f $RUN_NAME.*
    
     elif [ "$ACTION" = "plot" ] ; then
     
       echo "{
              s/#PAUSE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result.plt > plot_result.plt
       
       gnuplot plot_result.plt
       
       echo "FINISHED: $TEST_CASE: plot" > ./progress
    
     elif [ "$ACTION" = "plot_jpg" ] ; then
     
       echo "{
              s/#JPG/ /g
              s/#OUTPUT_TO_FILE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result.plt > plot_result.plt
       
       gnuplot plot_result.plt
       
       echo "FINISHED: $TEST_CASE: plot_jpg" > ./progress
       
     elif [ "$ACTION" = "plot_ref" ] ; then
     
       echo "{
              s/#PAUSE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result_with_reference.plt > plot_result_with_reference.plt
       
       gnuplot plot_result_with_reference.plt
       
       echo "FINISHED: $TEST_CASE: plot_ref" > ./progress
       
     elif [ "$ACTION" = "plot_ref_jpg" ] ; then
           
       echo "{
              s/#JPG/ /g
              s/#OUTPUT_TO_FILE/ /g
	      }" > sed_command

       sed -f sed_command PROBLEM_SPECIFICATION_FILES/plot_result_with_reference.plt > plot_result_with_reference.plt
       
       gnuplot plot_result_with_reference.plt
       
       echo "FINISHED: $TEST_CASE: plot_ref_jpg" > ./progress
      
     elif [ "$ACTION" = "reference" ] ; then
     
       PROBLEM_SPECIFICATION_FILES/create_reference_result       
       
       echo "FINISHED: $TEST_CASE: reference" > ./progress
      
     else 
     
       echo "Unknown action: $ACTION"      
     
     fi

  done
      
fi

# we have some arguments to run_automatic_test




